n
exit
times_qualified
n
offer.applied_quantity
applyiers_quantity
n
appliers
n
qualifiers_quantity >= offer.qualifying_quantity
qualifiers_quantity
n
qualifiers_quantity
qualifiers_quantiry
n
qualifiers
n
s
@basket
n
exit
(@basket.keys & offer.qualifying_skus & offer.applied_skus).empty?
(@basket.keys & offer.qualifying_skus).empty? && (@basket.keys & offer.applied_skus).empty?
@basket.keys & offer.qualifying_skus & offer.applied_skus
offer.applied_skus
offer.qualifying_skus
@basket.keys
offer
s
@basket
n
c
@store.special_offers.sort_by { |offer| offer.discounted_price_per_unit  }
puts @store.special_offers.sort_by { |offer| offer.discounted_price_per_unit  }
@store.special_offers.sort_by { |offer| offer.discounted_price_per_unit  }
offer
s
n
s
n
s
n
s
@basket
n
c
n
s
@basket
n
exit
@basket
n
@basket
?basket
n
exit
offer
offers
s
@basket
n
s
exit
offer
s
@basket
n
exit
qualifiers.empty?
qualifiers
n
offer
n
@basket
n
@basket
n
s
n
ticker
ticketr
n
s
times_qualified
n
@basket
n
offer.qualifying_quantity
qualifiers_quantity
n
offer
s
n
c
exit
qualifiers_quantity
n
qualifiers
n
offer
s
n
exit
offer
n
offer
s
@basket
n
exit
appliers
appliers[current_appliers_index]
s
n
offer.applied_quantity
s
times_qualified
n
appliers
n
qualifiers_quantity
qualifiers
n
offer
s
@basket
n
exit
@basket.keys.count
@basket
sku
exit
c
n
@basket
n
sku
s
@basket
n
@basket
exit
qualifiers.keys.map { |sku| @basket[sku][:remaining_count] }
qualifiers.map { |sku| @basket[sku][:remaining_count] }
qualifiers.map { |sku| @basket[sku][:remaining_count] }.
qualifiers_quantity
n
offer
qualifiers
n
exit
@basket
@baskey
n
skus
@basket
exit
c
@basket.keys
@basket
sku
c
sku
c
sku
c
sku.price
sku
c
sku
c
sku
c
n
expected
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
store_sku
n
s
sku_char_array
@store
c
@store.special_offers[1].applied_total_price / @store.special_offers[1].applied_quantity
@store.special_offers[1]
offer.applied_total_price / offer.applied_quantity
@store.special_offers
offer
offer.applied_quantity
s
total
remaining_count
times_qualified
n
offer
s
offer
s
n
count
sku
s
@basket
c



